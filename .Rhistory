1+1
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
exit
exit
library(KernSmooth)
exit
R.version.string
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
bye()
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_srt<-sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my
my
my_div
getwd()
ls()
x<-9
ls()
list.files()
dir()
list.files
list.files()
info()
info()
main()
?list.files
args(list.files())
args(list.files)
old.dir<-getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
getwd()
file.create("mytest.R")
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R" to "mytest2.R")
file.rename("mytest.R" "mytest2.R")
?info
?file.rename
file.rename("mytest,R","mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
?file.path
file.path("mytest3.R")
file.path("mytest3.R",'folder1','folder2')
file.path("folder1","folder2")
?dir.create
getwd()
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
se(0,10,by=0.5)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"Srini")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(c(1:3),c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
bye()
bye()
exit
bye()
q()
swirl()
swirl
?swirl
library(swirl)
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x(1:10)
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(f00=11,bar=2,norf=NA)
vect<-c(foo=11,bar=2,norf=NA)
vect
name(vect)
names(vect)
vect2(c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect)
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-c(1:20)
my_vector<-(1:20)
my_vector(1:20)
my_vector<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
info()
?`:`
my_vector<-[1:20}
my_vector<-(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill,"Gina","Kelly","Sean")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frmae(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cname("patient","age","weight","bp","rating","test")
cnames<-("patient","age","weight","bp","rating","test")
cnames<-c("patient","age","weight","bp","rating","test")
colnames(cnames)
colnames(my_data)<-cnames
my_data
bye()
q()
add2 <-function(x,y) {x+y
}
add2(3,5)
above <-function(x,n)
{
use <-x>n
x[use]
}
x<-1:20
above(x,12)
above <-function(x,n=10)
{
use <-x>n
x[use]
}
above(x)
columnmean <-function(y)
{
nc <- ncol(y)
means <-number(nc)
for(i in 1:nc) {
means[i] <-mean(y[,i])
}
means
}
columnmean(airquality)
columnmean(airquality)
columnmean <-function(y)
{
nc <- ncol(y)
means <-numeric(nc)
for(i in 1:nc) {
means[i] <-mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <-function(y, removeNA=TRUE)
{
nc <- ncol(y)
means <-numeric(nc)
for(i in 1:nc) {
means[i] <-mean(y[,i], na.rm=removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality,FALSE)
TRUE && 62 < 62 && 44 >=44
FALSE || TRUE && FALSE
99.99 > 100 || 45 < 7.3 || 4 != 4.0
TRUE && FALSE || 9 >=4 && 3 < 6
FALSE || TRUE && 6!=4 || 9>4
6>= -9 && !(6>7) && !(!TRUE)
FALSE && 6>=6 || 7>=8 || 50 <= 49.5
!(8>4) || 5==5.0 && 7.8 >= 7.79
isTRUE(NA)
isTRUE(!TRUE)
!isTRUE(4<3)
!isTRUE(8 !=5)
isTRUE(3)
xor(identical(xor, 'xor'), 7== 7.0)
xor(!isTRUE(TRUE), 6> -1_
xor(!isTRUE(TRUE), 6 > -1)
XOR(!!TRUE, !!FALSE)
xor(!!TRUE, !!FALSE)
xor(identical(xor,'xor'), 7==7.0)
xor(4 >=9, 8!=8.0)
all(ints==10)
all(ints==10)
ints <- sample(10)
all(ints==10)
all(c(TRUE,FALSE,TRUE))
any(ints==2.5)
any(ints==10)
q()
my_mean <- function(my_vector) {
  # Write your code here!
  # Remember: the last expression evaluated will be returned! 
   sum(c(1,2,3))
   xx
   yy <- length(c(1,2,3))
   yy
   zz <- mean(c(1,2,3))
   zz
}
my_mean(c(1,2,3))
my_mean(c(1,2,3))
my_mean <- function(my_vector) {
  # Write your code here!
  # Remember: the last expression evaluated will be returned! 
   xx <-sum(my_vector)
   xx
   yy <- length(my_vector)
   yy
   zz <- mean(my_vector)
   zz
}
my_mean(c(1,2,3))
?std
?standard deviation
?ellipses
?ellipses_func
telegram <- function(...){
  paste("START ","STOP", ...)
}
telegram("Good", "morning")
telegram <- function(...){
  paste("START ", ... ," STOP")
  }
telegram("Good", "morning")
  left && right
}
  left && right
}
"%p%" <- function(left,right){ # Remember to add arguments!
  left && right
}
"Good" %p% "job!"
"%p%" <- function(left,right){ # Remember to add arguments!
  left + right
}
"Good" %p% "job!"
"%p%" <- function(left,right){ # Remember to add arguments!
  paste(left,right)
}
"Good" %p% "job!"
q()
getwd()
source("C:/Users/sdesikan/Desktop/Coursera/ProgrammingAssignment2/cachematrix")
getwd()
source(getwd()&&/ProgrammingAssignment2/cachematrix)
source(getwd()/ProgrammingAssignment2/cachematrix)
source("C:\Users\sdesikan\Desktop\Coursera\ProgrammingAssignment2\cachematrix")
source('C:\Users\sdesikan\Desktop\Coursera\ProgrammingAssignment2\cachematrix')
getwd()
source(cachematrix)
getwd()
dir()
source(cachematrix)
source(cachematrix)
source(cachematrix.R)
source("cachematrix.R")
makeCacheMatrix(1:4,2,2)
makeCacheMatrix(1:4,2,2)
cacheSolve(1:4,2,2)
makeCacheMatrix(1:4,2,2)
makeCacheMatrix(1:4)
my_matrix <- MakeCacheMatrix(matrix(1:6,2,2))
my_matrix <- makeCacheMatrix(matrix(1:6,2,2))
my_matrix
my_matrix($get()
my_matrix$get()
my_matrix <- makeCacheMatrix(matrix(1:6,3,3))
my_matrix$get()
my_matrix$getInverse()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix($getinverse()
my_matrix$getinverse()
my_matrix$set(matrix(2,2,1,4),2,2))
my_matrix$set(matrix(2,2,1,4),2,2))
my_matrix$set(matrix(2,2,1,4),2,2)
my_matrix$getinverse()
my_matrix$set(matrix(c(2,2,1,4),2,2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getinverse()
my_matrix$get()
my_matrix$set(matrix(c(2,2,1,4,6,8),3,3))
my_matrix$get()
my_matrix$set(matrix(c(2,2,1,4,6,8,12,14,16),3,3))
my_matrix$get()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
makeCacheMatrix(matrix(1:9,3,3)
)
my_matrix <- makeCacheMatrix(matrix(1:9,3,3)
)
my_matrix
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$set()(matrix(1:9,3,3))
x <- makeCacheMatrix$set(matrix(c(1:9,3,3)))
xx <- makeCacheMatrix(matrix(1:9,3,3))
xx
xx$get()
xx$getinverse()
cacheSolve(xx)
q()
